
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.SalesDataScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  seller_sku: 'seller_sku',
  product_name: 'product_name',
  color: 'color',
  size: 'size',
  quantity: 'quantity',
  order_amount: 'order_amount',
  created_time: 'created_time',
  delivered_time: 'delivered_time',
  settlement_amount: 'settlement_amount',
  total_revenue: 'total_revenue',
  hpp: 'hpp',
  total: 'total',
  marketplace: 'marketplace',
  customer: 'customer',
  province: 'province',
  regency_city: 'regency_city',
  import_batch_id: 'import_batch_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ProductDataScalarFieldEnum = {
  id: 'id',
  product_code: 'product_code',
  product_name: 'product_name',
  category: 'category',
  brand: 'brand',
  size: 'size',
  color: 'color',
  price: 'price',
  cost: 'cost',
  stock_quantity: 'stock_quantity',
  min_stock: 'min_stock',
  description: 'description',
  import_batch_id: 'import_batch_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.StockDataScalarFieldEnum = {
  id: 'id',
  product_code: 'product_code',
  movement_type: 'movement_type',
  quantity: 'quantity',
  reference_number: 'reference_number',
  notes: 'notes',
  movement_date: 'movement_date',
  import_batch_id: 'import_batch_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ImportBatchScalarFieldEnum = {
  id: 'id',
  batch_name: 'batch_name',
  import_type: 'import_type',
  file_name: 'file_name',
  file_type: 'file_type',
  total_records: 'total_records',
  valid_records: 'valid_records',
  invalid_records: 'invalid_records',
  imported_records: 'imported_records',
  status: 'status',
  error_details: 'error_details',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AdvertisingDataScalarFieldEnum = {
  id: 'id',
  campaign_name: 'campaign_name',
  ad_creative_type: 'ad_creative_type',
  ad_creative: 'ad_creative',
  account_name: 'account_name',
  cost: 'cost',
  conversions: 'conversions',
  cpa: 'cpa',
  revenue: 'revenue',
  roi: 'roi',
  impressions: 'impressions',
  clicks: 'clicks',
  ctr: 'ctr',
  conversion_rate: 'conversion_rate',
  date_start: 'date_start',
  date_end: 'date_end',
  marketplace: 'marketplace',
  nama_produk: 'nama_produk',
  import_batch_id: 'import_batch_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AdvertisingSettlementScalarFieldEnum = {
  order_id: 'order_id',
  type: 'type',
  order_created_time: 'order_created_time',
  order_settled_time: 'order_settled_time',
  settlement_amount: 'settlement_amount',
  settlement_period: 'settlement_period',
  account_name: 'account_name',
  marketplace: 'marketplace',
  currency: 'currency',
  import_batch_id: 'import_batch_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ReturnsAndCancellationsScalarFieldEnum = {
  id: 'id',
  original_order_id: 'original_order_id',
  original_sales_id: 'original_sales_id',
  type: 'type',
  reason: 'reason',
  return_date: 'return_date',
  returned_amount: 'returned_amount',
  refund_amount: 'refund_amount',
  restocking_fee: 'restocking_fee',
  shipping_cost_loss: 'shipping_cost_loss',
  product_name: 'product_name',
  quantity_returned: 'quantity_returned',
  original_price: 'original_price',
  marketplace: 'marketplace',
  product_condition: 'product_condition',
  resellable: 'resellable',
  import_batch_id: 'import_batch_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.MarketplaceReimbursementScalarFieldEnum = {
  id: 'id',
  claim_id: 'claim_id',
  reimbursement_type: 'reimbursement_type',
  claim_amount: 'claim_amount',
  approved_amount: 'approved_amount',
  received_amount: 'received_amount',
  processing_fee: 'processing_fee',
  incident_date: 'incident_date',
  claim_date: 'claim_date',
  approval_date: 'approval_date',
  received_date: 'received_date',
  affected_order_id: 'affected_order_id',
  product_name: 'product_name',
  marketplace: 'marketplace',
  status: 'status',
  notes: 'notes',
  evidence_provided: 'evidence_provided',
  import_batch_id: 'import_batch_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CommissionAdjustmentsScalarFieldEnum = {
  id: 'id',
  original_order_id: 'original_order_id',
  original_sales_id: 'original_sales_id',
  adjustment_type: 'adjustment_type',
  reason: 'reason',
  original_commission: 'original_commission',
  adjustment_amount: 'adjustment_amount',
  final_commission: 'final_commission',
  marketplace: 'marketplace',
  commission_rate: 'commission_rate',
  dynamic_rate_applied: 'dynamic_rate_applied',
  transaction_date: 'transaction_date',
  adjustment_date: 'adjustment_date',
  product_name: 'product_name',
  quantity: 'quantity',
  product_price: 'product_price',
  import_batch_id: 'import_batch_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AffiliateSamplesScalarFieldEnum = {
  id: 'id',
  affiliate_name: 'affiliate_name',
  affiliate_platform: 'affiliate_platform',
  affiliate_contact: 'affiliate_contact',
  product_name: 'product_name',
  product_sku: 'product_sku',
  quantity_given: 'quantity_given',
  product_cost: 'product_cost',
  total_cost: 'total_cost',
  shipping_cost: 'shipping_cost',
  packaging_cost: 'packaging_cost',
  campaign_name: 'campaign_name',
  expected_reach: 'expected_reach',
  content_type: 'content_type',
  given_date: 'given_date',
  expected_content_date: 'expected_content_date',
  actual_content_date: 'actual_content_date',
  content_delivered: 'content_delivered',
  performance_notes: 'performance_notes',
  roi_estimate: 'roi_estimate',
  status: 'status',
  import_batch_id: 'import_batch_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  color: 'color',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.BrandScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  website: 'website',
  logo_color: 'logo_color',
  is_premium: 'is_premium',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SupplierScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  contact_person: 'contact_person',
  phone: 'phone',
  email: 'email',
  address: 'address',
  category: 'category',
  rating: 'rating',
  status: 'status',
  payment_terms: 'payment_terms',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PurchaseOrderScalarFieldEnum = {
  id: 'id',
  po_number: 'po_number',
  supplier_id: 'supplier_id',
  po_date: 'po_date',
  expected_date: 'expected_date',
  delivery_date: 'delivery_date',
  status: 'status',
  total_amount: 'total_amount',
  items_count: 'items_count',
  notes: 'notes',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PurchaseOrderItemScalarFieldEnum = {
  id: 'id',
  purchase_order_id: 'purchase_order_id',
  material_id: 'material_id',
  material_name: 'material_name',
  material_description: 'material_description',
  quantity: 'quantity',
  unit_price: 'unit_price',
  total_price: 'total_price',
  received_quantity: 'received_quantity',
  unit: 'unit',
  notes: 'notes',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CashFlowEntryScalarFieldEnum = {
  id: 'id',
  entry_date: 'entry_date',
  description: 'description',
  category: 'category',
  entry_type: 'entry_type',
  amount: 'amount',
  source: 'source',
  marketplace: 'marketplace',
  reference: 'reference',
  notes: 'notes',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.DashboardMetricsScalarFieldEnum = {
  id: 'id',
  metric_date: 'metric_date',
  distinct_orders: 'distinct_orders',
  total_quantity_sold: 'total_quantity_sold',
  total_revenue: 'total_revenue',
  total_profit: 'total_profit',
  total_hpp: 'total_hpp',
  profit_margin: 'profit_margin',
  average_order_value: 'average_order_value',
  total_sales_records: 'total_sales_records',
  today_revenue: 'today_revenue',
  today_orders: 'today_orders',
  month_revenue: 'month_revenue',
  month_orders: 'month_orders',
  total_products: 'total_products',
  low_stock_products: 'low_stock_products',
  out_of_stock_products: 'out_of_stock_products',
  total_categories: 'total_categories',
  total_brands: 'total_brands',
  calculated_at: 'calculated_at'
};

exports.Prisma.ImportHistoryScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  user_id: 'user_id',
  import_type: 'import_type',
  file_name: 'file_name',
  file_size: 'file_size',
  file_hash: 'file_hash',
  total_records: 'total_records',
  imported_records: 'imported_records',
  failed_records: 'failed_records',
  duplicate_records: 'duplicate_records',
  success_rate: 'success_rate',
  processing_time_ms: 'processing_time_ms',
  import_status: 'import_status',
  error_details: 'error_details',
  import_summary: 'import_summary',
  metadata: 'metadata',
  source_ip: 'source_ip',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  invoice_number: 'invoice_number',
  customer_name: 'customer_name',
  customer_email: 'customer_email',
  customer_phone: 'customer_phone',
  issue_date: 'issue_date',
  due_date: 'due_date',
  status: 'status',
  type: 'type',
  subtotal: 'subtotal',
  tax: 'tax',
  discount: 'discount',
  total: 'total',
  notes: 'notes',
  payment_method: 'payment_method',
  payment_date: 'payment_date',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by'
};

exports.Prisma.InvoiceItemScalarFieldEnum = {
  id: 'id',
  invoice_id: 'invoice_id',
  product_name: 'product_name',
  quantity: 'quantity',
  unit_price: 'unit_price',
  total: 'total',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AffiliateEndorsementScalarFieldEnum = {
  id: 'id',
  campaign_name: 'campaign_name',
  affiliate_name: 'affiliate_name',
  affiliate_type: 'affiliate_type',
  start_date: 'start_date',
  end_date: 'end_date',
  endorse_fee: 'endorse_fee',
  target_sales: 'target_sales',
  actual_sales: 'actual_sales',
  total_commission: 'total_commission',
  payment_method: 'payment_method',
  platform: 'platform',
  content_type: 'content_type',
  followers: 'followers',
  engagement: 'engagement',
  reference: 'reference',
  notes: 'notes',
  status: 'status',
  roi: 'roi',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AffiliateProductSaleScalarFieldEnum = {
  id: 'id',
  endorsement_id: 'endorsement_id',
  product_name: 'product_name',
  quantity: 'quantity',
  unit_price: 'unit_price',
  total_sales: 'total_sales',
  commission: 'commission',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ActivityLogsScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  description: 'description',
  status: 'status',
  metadata: 'metadata',
  user_id: 'user_id',
  related_id: 'related_id',
  related_type: 'related_type',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.DuplicateCheckLogsScalarFieldEnum = {
  id: 'id',
  file_name: 'file_name',
  file_size: 'file_size',
  file_hash: 'file_hash',
  import_type: 'import_type',
  check_result: 'check_result',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ImportMetadataScalarFieldEnum = {
  id: 'id',
  import_history_id: 'import_history_id',
  metadata_type: 'metadata_type',
  metadata: 'metadata',
  created_at: 'created_at'
};

exports.Prisma.TailorScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  contact_person: 'contact_person',
  phone: 'phone',
  email: 'email',
  address: 'address',
  specialization: 'specialization',
  rating: 'rating',
  status: 'status',
  payment_terms: 'payment_terms',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TailorProductionScalarFieldEnum = {
  id: 'id',
  tailor_id: 'tailor_id',
  product_name: 'product_name',
  color: 'color',
  size: 'size',
  finished_stock: 'finished_stock',
  meters_needed: 'meters_needed',
  cost_per_piece: 'cost_per_piece',
  defective_stock: 'defective_stock',
  additional_costs: 'additional_costs',
  additional_cost_description: 'additional_cost_description',
  delivery_date: 'delivery_date',
  notes: 'notes',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ProductHPPScalarFieldEnum = {
  id: 'id',
  nama_produk: 'nama_produk',
  size: 'size',
  hpp: 'hpp',
  kategori: 'kategori',
  deskripsi: 'deskripsi',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.StockMovementType = exports.$Enums.StockMovementType = {
  in: 'in',
  out: 'out',
  adjustment: 'adjustment'
};

exports.ImportType = exports.$Enums.ImportType = {
  sales: 'sales',
  products: 'products',
  stock: 'stock',
  advertising: 'advertising',
  advertising_settlement: 'advertising_settlement',
  ADVERTISING_SETTLEMENT: 'ADVERTISING_SETTLEMENT',
  returns_and_cancellations: 'returns_and_cancellations',
  marketplace_reimbursements: 'marketplace_reimbursements',
  commission_adjustments: 'commission_adjustments',
  affiliate_samples: 'affiliate_samples'
};

exports.ImportStatus = exports.$Enums.ImportStatus = {
  pending: 'pending',
  processing: 'processing',
  completed: 'completed',
  failed: 'failed',
  partial: 'partial'
};

exports.SupplierStatus = exports.$Enums.SupplierStatus = {
  active: 'active',
  inactive: 'inactive',
  pending: 'pending'
};

exports.POStatus = exports.$Enums.POStatus = {
  draft: 'draft',
  sent: 'sent',
  confirmed: 'confirmed',
  partial: 'partial',
  delivered: 'delivered',
  cancelled: 'cancelled'
};

exports.CashFlowType = exports.$Enums.CashFlowType = {
  income: 'income',
  expense: 'expense'
};

exports.ImportHistoryStatus = exports.$Enums.ImportHistoryStatus = {
  pending: 'pending',
  processing: 'processing',
  completed: 'completed',
  failed: 'failed',
  partial: 'partial'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  draft: 'draft',
  sent: 'sent',
  paid: 'paid',
  overdue: 'overdue',
  cancelled: 'cancelled'
};

exports.InvoiceType = exports.$Enums.InvoiceType = {
  invoice: 'invoice',
  receipt: 'receipt'
};

exports.TailorStatus = exports.$Enums.TailorStatus = {
  active: 'active',
  inactive: 'inactive',
  pending: 'pending'
};

exports.TailorProductionStatus = exports.$Enums.TailorProductionStatus = {
  completed: 'completed',
  in_progress: 'in_progress',
  pending: 'pending'
};

exports.Prisma.ModelName = {
  SalesData: 'SalesData',
  ProductData: 'ProductData',
  StockData: 'StockData',
  ImportBatch: 'ImportBatch',
  AdvertisingData: 'AdvertisingData',
  AdvertisingSettlement: 'AdvertisingSettlement',
  ReturnsAndCancellations: 'ReturnsAndCancellations',
  MarketplaceReimbursement: 'MarketplaceReimbursement',
  CommissionAdjustments: 'CommissionAdjustments',
  AffiliateSamples: 'AffiliateSamples',
  Category: 'Category',
  Brand: 'Brand',
  Supplier: 'Supplier',
  PurchaseOrder: 'PurchaseOrder',
  PurchaseOrderItem: 'PurchaseOrderItem',
  CashFlowEntry: 'CashFlowEntry',
  DashboardMetrics: 'DashboardMetrics',
  ImportHistory: 'ImportHistory',
  Invoice: 'Invoice',
  InvoiceItem: 'InvoiceItem',
  AffiliateEndorsement: 'AffiliateEndorsement',
  AffiliateProductSale: 'AffiliateProductSale',
  ActivityLogs: 'ActivityLogs',
  DuplicateCheckLogs: 'DuplicateCheckLogs',
  ImportMetadata: 'ImportMetadata',
  Tailor: 'Tailor',
  TailorProduction: 'TailorProduction',
  ProductHPP: 'ProductHPP'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
